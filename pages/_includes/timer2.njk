<!-- Presentation Timer Component -->
<div id="presentation-timer" class="timer-container">
  <div class="timer-drag-handle"></div>
  <div class="timer-controls">
    <input type="number" id="timer-minutes" min="0" max="60" value="5">
    <span>:</span>
    <input type="number" id="timer-seconds" min="0" max="59" value="0">
  </div>
  <div class="timer-display">
    <span id="timer-value">05:00</span>
  </div>
  <div class="timer-buttons">
    <button id="timer-start" class="timer-btn start">Start</button>
    <button id="timer-reset" class="timer-btn">Reset</button>
  </div>
  <div class="timer-tools">
    <button id="timer-minimize">↓</button>
    <button id="timer-zoom-out">−</button>
    <span id="zoom-level">1×</span>
    <button id="timer-zoom-in">+</button>
  </div>
</div>

<style>
  .timer-container {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 180px;
    background-color: rgba(30, 30, 30, 0.85);
    border-radius: 10px;
    padding: 10px;
    z-index: 9999;
    font-family: 'Helvetica Neue', Arial, sans-serif;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    user-select: none;
  }

  .timer-drag-handle {
    height: 8px;
    width: 50px;
    margin: 0 auto 6px;
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.25);
    cursor: move;
  }

  .timer-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 5px;
  }

  .timer-controls input {
    width: 45px;
    background-color: rgba(40, 40, 40, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: white;
    font-size: 16px;
    text-align: center;
    padding: 4px 0;
  }

  .timer-controls span {
    color: white;
    margin: 0 5px;
    font-weight: bold;
  }

  .timer-display {
    background-color: rgba(120, 20, 20, 0.9);
    border-radius: 6px;
    padding: 10px 5px;
    text-align: center;
    margin-bottom: 8px;
  }

  #timer-value {
    font-size: 32px;
    font-weight: bold;
    color: white;
    font-family: monospace;
  }

  .timer-buttons {
    display: flex;
    justify-content: space-between;
    gap: 6px;
    margin-bottom: 6px;
  }

  .timer-btn {
    flex: 1;
    background-color: rgba(60, 60, 60, 0.8);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 0;
    cursor: pointer;
    font-size: 16px;
  }

  .timer-btn.start {
    background-color: rgba(40, 100, 40, 0.8);
  }
  
  .timer-btn.pause {
    background-color: rgba(100, 100, 40, 0.8);
  }

  .timer-tools {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 30px;
  }

  .timer-tools button {
    width: 30px;
    height: 30px;
    background-color: rgba(60, 60, 60, 0.5);
    border: none;
    border-radius: 4px;
    color: white;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  #zoom-level {
    color: rgba(255, 255, 255, 0.7);
    font-size: 10px;
    text-align: center;
    width: 20px;
    display: flex;
    justify-content: center;
  }
  
  /* Minimized state */
  .timer-minimized .timer-controls,
  .timer-minimized .timer-buttons {
    display: none;
  }
  
  .timer-minimized .timer-display {
    margin-bottom: 4px;
  }
  
  /* Warning state */
  .timer-warning {
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0% { background-color: rgba(120, 20, 20, 0.9); }
    50% { background-color: rgba(180, 30, 30, 0.9); }
    100% { background-color: rgba(120, 20, 20, 0.9); }
  }
  
  /* Zoom levels */
  .timer-zoom-2 #timer-value { font-size: 40px; }
  .timer-zoom-3 #timer-value { font-size: 52px; }
  .timer-zoom-4 #timer-value { font-size: 64px; }
</style>

<script>
(function() {
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', init);
  
  function init() {
    // DOM elements
    const timer = document.getElementById('presentation-timer');
    const minutesInput = document.getElementById('timer-minutes');
    const secondsInput = document.getElementById('timer-seconds');
    const timerValue = document.getElementById('timer-value');
    const startBtn = document.getElementById('timer-start');
    const resetBtn = document.getElementById('timer-reset');
    const minimizeBtn = document.getElementById('timer-minimize');
    const zoomInBtn = document.getElementById('timer-zoom-in');
    const zoomOutBtn = document.getElementById('timer-zoom-out');
    const zoomLevel = document.getElementById('zoom-level');
    const display = document.querySelector('.timer-display');
    const dragHandle = document.querySelector('.timer-drag-handle');
    
    // Timer state
    let countdown = null;
    let totalSeconds = 300; // 5 minutes default
    let isRunning = false;
    let zoomLevel = 1;
    
    // Initialize
    updateDisplay();
    setupDraggable();
    
    // Event listeners
    startBtn.addEventListener('click', toggleTimer);
    resetBtn.addEventListener('click', resetTimer);
    minimizeBtn.addEventListener('click', toggleMinimize);
    zoomInBtn.addEventListener('click', () => changeZoom(1));
    zoomOutBtn.addEventListener('click', () => changeZoom(-1));
    minutesInput.addEventListener('change', updateFromInputs);
    secondsInput.addEventListener('change', updateFromInputs);
    
    function updateDisplay() {
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      timerValue.textContent = `${pad(minutes)}:${pad(seconds)}`;
    }
    
    function pad(num) {
      return num < 10 ? `0${num}` : num;
    }
    
    function updateFromInputs() {
      let mins = parseInt(minutesInput.value) || 0;
      let secs = parseInt(secondsInput.value) || 0;
      
      mins = Math.min(Math.max(mins, 0), 60);
      secs = Math.min(Math.max(secs, 0), 59);
      
      minutesInput.value = mins;
      secondsInput.value = secs;
      
      totalSeconds = (mins * 60) + secs;
      updateDisplay();
    }
    
    function toggleTimer() {
      if (isRunning) {
        pauseTimer();
      } else {
        startTimer();
      }
    }
    
    function startTimer() {
      if (isRunning) return;
      
      updateFromInputs();
      if (totalSeconds <= 0) return;
      
      isRunning = true;
      startBtn.textContent = 'Pause';
      startBtn.classList.remove('start');
      startBtn.classList.add('pause');
      minutesInput.disabled = true;
      secondsInput.disabled = true;
      display.classList.remove('timer-warning');
      
      countdown = setInterval(() => {
        totalSeconds--;
        updateDisplay();
        
        if (totalSeconds < 60 && !display.classList.contains('timer-warning')) {
          display.classList.add('timer-warning');
        }
        
        if (totalSeconds <= 0) {
          clearInterval(countdown);
          timerFinished();
        }
      }, 1000);
    }
    
    function pauseTimer() {
      if (!isRunning) return;
      
      clearInterval(countdown);
      isRunning = false;
      startBtn.textContent = 'Start';
      startBtn.classList.remove('pause');
      startBtn.classList.add('start');
    }
    
    function resetTimer() {
      clearInterval(countdown);
      isRunning = false;
      startBtn.textContent = 'Start';
      startBtn.classList.remove('pause');
      startBtn.classList.add('start');
      minutesInput.disabled = false;
      secondsInput.disabled = false;
      display.classList.remove('timer-warning');
      
      updateFromInputs();
    }
    
    function timerFinished() {
      isRunning = false;
      startBtn.textContent = 'Start';
      startBtn.classList.remove('pause');
      startBtn.classList.add('start');
      minutesInput.disabled = false;
      secondsInput.disabled = false;
      
      // Visual notification
      let flashCount = 0;
      const flashInterval = setInterval(() => {
        if (flashCount >= 5) {
          clearInterval(flashInterval);
          display.classList.add('timer-warning');
          return;
        }
        display.classList.toggle('timer-warning');
        flashCount++;
      }, 300);
    }
    
    function toggleMinimize() {
      timer.classList.toggle('timer-minimized');
    }
    
    function changeZoom(delta) {
      zoomLevel = Math.max(1, Math.min(4, zoomLevel + delta));
      
      // Update zoom level indicators
      document.getElementById('zoom-level').textContent = `${zoomLevel}×`;
      zoomOutBtn.disabled = (zoomLevel <= 1);
      
      // Update visual zoom
      timer.classList.remove('timer-zoom-1', 'timer-zoom-2', 'timer-zoom-3', 'timer-zoom-4');
      if (zoomLevel > 1) {
        timer.classList.add(`timer-zoom-${zoomLevel}`);
      }
    }
    
    function setupDraggable() {
      let isDragging = false;
      let startX, startY, startLeft, startTop;
      
      dragHandle.addEventListener('mousedown', dragStart);
      dragHandle.addEventListener('touchstart', touchStart, { passive: false });
      
      function dragStart(e) {
        e.preventDefault();
        isDragging = true;
        
        const rect = timer.getBoundingClientRect();
        startLeft = rect.left;
        startTop = rect.top;
        startX = e.clientX;
        startY = e.clientY;
        
        document.addEventListener('mousemove', dragMove);
        document.addEventListener('mouseup', dragEnd);
      }
      
      function dragMove(e) {
        if (!isDragging) return;
        
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
        const newLeft = startLeft + dx;
        const newTop = startTop + dy;
        
        timer.style.left = `${newLeft}px`;
        timer.style.top = `${newTop}px`;
        timer.style.right = 'auto';
      }
      
      function dragEnd() {
        isDragging = false;
        document.removeEventListener('mousemove', dragMove);
        document.removeEventListener('mouseup', dragEnd);
        
        // Save position
        try {
          localStorage.setItem('timerPosition', JSON.stringify({
            left: timer.style.left,
            top: timer.style.top
          }));
        } catch (e) {
          console.error('Error saving position:', e);
        }
      }
      
      function touchStart(e) {
        if (e.touches.length !== 1) return;
        e.preventDefault();
        
        isDragging = true;
        const touch = e.touches[0];
        const rect = timer.getBoundingClientRect();
        startLeft = rect.left;
        startTop = rect.top;
        startX = touch.clientX;
        startY = touch.clientY;
        
        document.addEventListener('touchmove', touchMove, { passive: false });
        document.addEventListener('touchend', touchEnd);
      }
      
      function touchMove(e) {
        if (!isDragging || e.touches.length !== 1) return;
        e.preventDefault();
        
        const touch = e.touches[0];
        const dx = touch.clientX - startX;
        const dy = touch.clientY - startY;
        const newLeft = startLeft + dx;
        const newTop = startTop + dy;
        
        timer.style.left = `${newLeft}px`;
        timer.style.top = `${newTop}px`;
        timer.style.right = 'auto';
      }
      
      function touchEnd() {
        isDragging = false;
        document.removeEventListener('touchmove', touchMove);
        document.removeEventListener('touchend', touchEnd);
        
        // Save position
        try {
          localStorage.setItem('timerPosition', JSON.stringify({
            left: timer.style.left,
            top: timer.style.top
          }));
        } catch (e) {
          console.error('Error saving position:', e);
        }
      }
      
      // Load saved position
      try {
        const savedPosition = localStorage.getItem('timerPosition');
        if (savedPosition) {
          const { left, top } = JSON.parse(savedPosition);
          timer.style.left = left;
          timer.style.top = top;
          timer.style.right = 'auto';
        }
      } catch (e) {
        console.error('Error loading position:', e);
      }
    }
  }
})();
</script>